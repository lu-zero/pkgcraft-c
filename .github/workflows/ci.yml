name: CI

on:
  push:
    branches-ignore: [audit,deploy]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust-version: ['1.60.0', 'stable']

    steps:
    - name: Checkout workspace
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/pkgcraft-workspace
        submodules: recursive

    - name: Pull submodule updates
      run: git submodule update --recursive --remote

    - name: Remove current repo from workspace
      run: rm -rfv ${{ github.event.repository.name }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: ${{ github.event.repository.name }}

    - name: Set up rust toolchain
      uses: actions-rs/toolchain@v1
      id: rust
      with:
        toolchain: ${{ matrix.rust-version }}
        profile: minimal
        override: true

    - name: Set up rust cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: v3-${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.rustc_hash }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: v3-${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.rustc_hash }}-cargo-

    - name: Update deps
      run: cargo update -p ${{ github.event.repository.name }}

    - name: Install cargo-c via binary package on Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: curl -L https://github.com/lu-zero/cargo-c/releases/latest/download/cargo-c-linux.tar.gz | tar xvzf - -C ~/.cargo/bin

    - name: Install cargo-c via binary package on MacOS
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        curl -L https://github.com/lu-zero/cargo-c/releases/latest/download/cargo-c-macos.zip > cargo-c.zip
        unzip -o cargo-c.zip -d ~/.cargo/bin
        rm cargo-c.zip

    - name: Build C library
      run: |
        cargo cinstall -p pkgcraft-c --prefix="${PWD}/pkgcraft" --pkgconfigdir="${PWD}/pkgcraft"
        echo "PKG_CONFIG_PATH=${PWD}/pkgcraft" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${PWD}/pkgcraft/lib" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=${PWD}/pkgcraft/lib" >> $GITHUB_ENV

    - name: Install meson
      run: pip3 install meson

    - name: Install ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Run tests
      working-directory: ${{ github.event.repository.name }}
      run: |
        meson setup build
        meson test -C build

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout workspace
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/pkgcraft-workspace
        submodules: recursive

    - name: Pull submodule updates
      run: git submodule update --recursive --remote

    - name: Remove current repo from workspace
      run: rm -rfv ${{ github.event.repository.name }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: ${{ github.event.repository.name }}

    - name: Set up rust toolchain
      uses: actions-rs/toolchain@v1
      id: rust
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: clippy, rustfmt

    - name: Set up rust cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: v3-${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.rustc_hash }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: v3-${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.rustc_hash }}-cargo-

    - name: Update deps
      run: cargo update -p ${{ github.event.repository.name }}

    - name: Run rustfmt
      run: cargo fmt --check -p ${{ github.event.repository.name }}

    - name: Run clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: -p ${{ github.event.repository.name }}
